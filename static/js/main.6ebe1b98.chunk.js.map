{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","pcMonster","id","name","email","CardList","pclMonsters","map","mclMonster","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","saMonsters","fetch","then","response","json","users","this","filterSaMonsters","filter","fMonster","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2UAGaA,G,MAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,UAAUC,GAA1C,4BACtB,gCAAML,EAAMI,UAAUE,KAAtB,KACA,2BAAIN,EAAMI,UAAUG,UCHfC,G,MAAW,SAACR,GAAD,OACpB,yBAAKC,UAAU,aACVD,EAAMS,YAAYC,KAAI,SAAAC,GAAU,OACjC,kBAAC,EAAD,CAAMC,IAAKD,EAAWN,GAAID,UAAWO,UCHhCE,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BACId,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCsDHG,G,wDAvDb,aAAe,IAAD,8BACZ,gBAyBFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAxBrC,EAAKC,MAAQ,CACXC,WAAY,GACZJ,YAAa,IALH,E,gEAcM,IAAD,OACjBK,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACK,WAAYK,S,+BAatC,MAQ4BC,KAAKP,MAAhCC,EARD,EAQCA,WAAYJ,EARb,EAQaA,YACbW,EAAmBP,EAAWQ,QAAO,SAAAC,GAAQ,OAC/CA,EAAS5B,KAAK6B,cAAcC,SAASf,EAAYc,kBAErD,OACE,yBAAKlC,UAAU,OACb,iDACA,kBAAC,EAAD,CACEa,YAAY,kBACZC,aAAcgB,KAAKhB,eAErB,kBAAC,EAAD,CAAUN,YAAauB,S,GAlDbK,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6ebe1b98.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <img alt='monster' src={`https://robohash.org/${props.pcMonster.id}?set=set2&size=180x180`} />\r\n        <h2> {props.pcMonster.name} </h2>\r\n        <p>{props.pcMonster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport {Card} from \"../card/card.component\";\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = (props) => (\r\n    <div className='card-list'>\r\n        {props.pclMonsters.map(mclMonster => (\r\n        <Card key={mclMonster.id} pcMonster={mclMonster}/>\r\n        ))}\r\n    </div>\r\n);","import React from 'react';\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input\r\n        className='search'\r\n        type='search'\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n    />\r\n);","import React, {Component} from 'react';\n\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from \"./components/search-box/search-box.component\";\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      saMonsters: [],\n      searchField: ''\n    };\n\n    // AD1: Słowo kluczowe this, odnosi się do kontekstu aplikacji, czyli odpowiedniego momentu w którym kod się wykonuje. Jeżeli wyciągniemy jakąs metodę z kontekstu innej metody\n    // this będzie niezdefiniowane (Właściwości JavaScriptu)\n    // Aby to działało należy powiązać kontekst funkcji wyniesionej z kontekstem funkcji, w której chcemy jej użyć\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({saMonsters: users}));\n  }\n\n  // AD1:\n  // handleChange (e) {\n  //   this.setState({searchField: e.target.value});\n  // }\n\n  //Aby ułatwić problem wytłumaczony w AD1 uzywa się ArrowFunkction =>\n  handleChange = e => {\n    this.setState({searchField: e.target.value});\n  }\n\n  render(){\n    // Nie chcemy zmieniać stanu, żeby mieć gdzieś dane, które są wiarygodne przez cały czas.\n    // Dlatego tworzymy stałe na podstawie stany, używając destrukturyzacji:\n    //const {saMonsters, searchField} = this.state;\n    //to samo co:\n    //const saMonsters = this.state.monsters;\n    //const searchField = this.state.searchField\n\n    const {saMonsters, searchField} = this.state;\n    const filterSaMonsters = saMonsters.filter(fMonster =>\n        fMonster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return(\n      <div className='App'>\n        <h1> Monster Rolodex </h1>\n        <SearchBox\n          placeholder='search monsters'\n          handleChange={this.handleChange}\n          />\n        <CardList pclMonsters={filterSaMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// return(\n//     <div className='App'>\n//       <input\n//           type='search'\n//           placeholder='Search monsters'\n//           onChange={e => {this.setState({searchField: e.target.value}\n//               // ,() => console.log(this.state) wywołanie metody, która wykona się natychmiast - sam (asynchroniczny) setState czekałby na kolejne wywołanie pozostając\n//               // \"jeden krok w tyle\"\n//               //    w tym przykładzie filterSaMonsters działa, ponieważ setState() wywołuje metodę render(), na początku, której jest ustawiona stała. setState() przekazuje\n//               //    wtedy stan ustawiony z poprzedniego renderowania do kolejnego dięki czemu na bieżąco mamy wyswietlane szukane elementy\n//           )}}/>\n//       <CardList pclMonsters={filterSaMonsters}/>\n//     </div>\n// );\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}